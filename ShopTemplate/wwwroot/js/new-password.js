"use strict"; var KTPasswordResetNewPassword = function () { var e, t, a, r; return { init: function () { e = document.querySelector("#kt_new_password_form"), t = document.querySelector("#kt_new_password_submit"), r = KTPasswordMeter.getInstance(e.querySelector('[data-kt-password-meter="true"]')), a = FormValidation.formValidation(e, { fields: { Password: { validators: { notEmpty: { message: "The password is required" }, callback: { message: "Please enter valid password", callback: function (e) { if (e.value.length > 0) return 100 === r.getScore() } } } }, ConfirmPassword: { validators: { notEmpty: { message: "The password confirmation is required" }, identical: { compare: function () { return e.querySelector('[name="Password"]').value }, message: "The password and its confirm are not the same" } } }, toc: { validators: { notEmpty: { message: "You must accept the terms and conditions" } } } }, plugins: { trigger: new FormValidation.plugins.Trigger({ event: { password: !1 } }), bootstrap: new FormValidation.plugins.Bootstrap5({ rowSelector: ".fv-row", eleInvalidClass: "", eleValidClass: "" }) } }), t.addEventListener("click", function (r) { r.preventDefault(), a.revalidateField("Password"), a.validate().then(function (a) { "Valid" == a ? (t.setAttribute("data-kt-indicator", "on"), t.disabled = !0, e.submit()) : Swal.fire({ text: "Sorry, looks like there are some errors detected, please try again.", icon: "error", buttonsStyling: !1, confirmButtonText: "Ok, got it!", customClass: { confirmButton: "btn btn-primary" } }) }) }), e.querySelector('input[name="Password"]').addEventListener("input", function () { this.value.length > 0 && a.updateFieldStatus("Password", "NotValidated") }) } } }(); KTUtil.onDOMContentLoaded(function () { KTPasswordResetNewPassword.init() });